<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux 随学随记 (4)]]></title>
    <url>%2F%2Fposts%2F2015-08-20-Linux-Notes-4.html</url>
    <content type="text"><![CDATA[mplayer 循环播放歌曲 1$ mplayer -loop n ***.mp3 n 表示重复次数，0 表示无限循环。 vim 搜索大小写匹配 set ignorecase 忽略正常字母的大小写 set smartcase 只包含小写字母时忽略大小写 \c 强制忽略大小写 \C 强制匹配大小写 cd 转移 当两个目录路径只有一个区别（比如一个单词不同）时，这个是从旧目录切换到新目录的一种简单方法。 cd directorya directoryb 第一个参数是当前目录路径中需要替换的参数，第二个参数是替换字符串。 # 要从v7目录 切换到v8目录，只需键入cd v7 v8 /programs/v7/reports/monthly &gt; cd v7 v8 /programs/v8/reports/monthly &gt; # 如果历史上的每年每月都有一个对应目录，cd 转移允许从一年跳到另一年 /hist/2010/april/reports &gt; cd 2010 2011 /hist/2011/april/reports &gt; # 切换月份目录 /hist/2011/april/reports &gt; cd april may /hist/2011/may/reports &gt; vim 快速缩进 &gt;&gt; 向右缩进 &lt;&lt; 向左缩进 :ce (center) 文本居中 :le (left) 文本靠左 :ri (right) 文本靠右 vim 编辑多个文件 :n 编辑下一个文件 :N 编辑上一个文件 :e# 回到前一个文件 :ls 列出所有编辑的文件 :b 2.txt or :b 2 直接进入文件 2.txt 或者编号为 2 的文件编辑 :bd 2.txt or :b 2 删除列表中的文件项目 :f 显示正在编辑的文件名 :f new.txt 重命名当前文件为 new.txt vim 加密文件 $ vim -x file1 创建加密文档 file1 set cm=blowfish2 (newest) 设置加密方式]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 下 zip 解压的文件名乱码问题]]></title>
    <url>%2F%2Fposts%2F2014-08-14-Linux-Zipfile-Bug-in-Chinese.html</url>
    <content type="text"><![CDATA[在 windows 下打包的 zip 文件, 文件名是以 GBK 的方式编码的, 在 Linux 下解压会出现文件名乱码的问题. 一种方法是通过 wine 安装 7z 或 haozip 来解决. 另一种方法是利用环境变量 + 7z + convmv 来解决. 用 7z 在 LC_ALL=C 或 LC_ALL=zh_CN.gbk 的环境下解压 zip 文件: 1LC_ALL=C 7z x -oOUTDIR zipfile.zip 然后用 convmv 检测文件名的编码转换, 查看是否有乱码: 1convmv -f cp936 -t utf8-r * 如果没有乱码, 则可以进行转换: 1convmv -f cp936 -t utf8 --notest * 如果还要转换某个文件的编码, 则可以用 iconv : 1iconv -f cp936 -t utf8 -o outfile infile 网上还经常提到的一种方法是用 unzip 的 -O 选项, 可惜在新版的 unzip 中这一选项被移除了, 如果需要也可以自己打补丁, 不过个人感觉很麻烦. 还有一种方法是用 python 来做. 网上有一个流传比较广的脚本, 不过功能不过完善, 下面的代码是在原代码基础上修改而成的:]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zip</tag>
        <tag>encode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 随学随记 (3)]]></title>
    <url>%2F%2Fposts%2F2014-04-20-Linux-Notes-3.html</url>
    <content type="text"><![CDATA[^[ 使用Ctrl-V Esc生成（ASC ASCII值） 二、开机自启动文件 系统: /etc/rc.d/rc.local 用户: $HOME/.config/autostart/ 三、sed 替换中使用变量 sed替换命令用双引号&quot; &quot; 而不是单引号 ' '，然后里面直接用 $VARIABLE 就可以了。 四、vim 保存 root 权限文件 1:w !sudo tee % 五、vim 跳转 12Ctrl+] = Ctrl+left\_clickCtrl+t = Ctrl+right\_click 六、从视频中提取音频 运行以下命令之一： 123$ mencoder -oac mp3lame -ovc copy -of rawaudio 01.flv -o 01.mp3$ ffmpeg -i 01.flv -f mp3 -vn 01.mp3$ ffmpeg -i 01.flv -acodec libmp3lame -vn 01.mp3 七、交换 CapsLock 键和左 Ctrl 键 1. 使用 gnome-tweak-tool 选择 Typing &gt; Ctrl key position &gt; Swap Ctrl and Caps Lock 即可。 （要求 gsettings get org.gnome.settings-daemon.plugins.keyboard active 的值为 true，故在 gnome 中使用 fcitx 时此方法无法使用） 2. 使用 setxkbmap 命令 运行 1setxkbmap -option ctrl:swapctrl 或者在 ~/.zshrc 中添加如下内容： 1234# Swap Ctrl_L and CapsLockif [[ -n $DISPLAY ]]; then setxkbmap -option ctrl:swapctrlfi 八、交换 Escape 键和右 Alt 键 这时，前面两种方法都没有现成的选项可以使用，因此我们使用xmodmap 建立 ~/.xmodmap，添加如下内容： 12345! 交换Escape和Alt_Rclear mod1keycode 9 = Alt_R NoSymbol Alt_Rkeycode 108 = Escape NoSymbol Escapeadd mod1 = Escape Meta_L 然后运行 1xmodmap ~/.xmodmap 2&gt;/dev/null 网上的教程都是要将命令添加到 ~/.xinitrc 或 /etc/rc.d/rc.local 中，而不是 ~/.zshrc (或 ~/.bashrc)中，否则会重复执行使得键位回归。但经测试，前者无法成功(有的地方解释是 xinitrc 在新版本中已不再使用)，于是我在 ~/.zshrc 中添加如下代码: 1234# Swap Alt_R and Escapeif [[ -n $DISPLAY ]] &amp;&amp; [[ -n $(xmodmap|grep "mod1.*Alt_R") ]]; then xmodmap "$HOME"/.xmodmap 2&gt;/dev/nullfi]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改 NetworkManager wifi 热点的加密方式]]></title>
    <url>%2F%2Fposts%2F2014-03-22-NetworkManager-Hotspot-Setting.html</url>
    <content type="text"><![CDATA[Note: 在 Fedora 21 中, 默认的加密方式已改为 WPA NetworkManager 共享 wifi 热点时默认的加密方式是 WEP, 这种加密方式早已被证明安全性较低.而 WPA 加密的安全性则相对较高. wifi 热点的配置文件为 /etc/NetworkManager/system-connections/Hostpot, 该文件须用 root 权限打开. 修改: ssid: wifi 名称, 可改为自己想要的. key-mgmt: 加密方式, 有以下几种: none: WEP ieee8021x: Dynamic WEP wpa-none: WPA-PSK Ad-Hoc wpa-psk: infrastructure WPA-PSK wpa-eap: WPA-Enterprise 默认为 key-mgmt=none, 我将其修改为 key-mgmt=wpa-psk. 下面原来两行 12wep-key0=wep-key-type= 为WEP密码和类型, 将其删去或注释掉, 改为 1psk=your_password 然后重启 NetworkManager 服务即可 1sudo systemctl restart NetworkManager.service]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 随学随记 (2)]]></title>
    <url>%2F%2Fposts%2F2014-03-19-Linux-Notes-2.html</url>
    <content type="text"><![CDATA[一、vim切换tab: 向后 :tabn 向前 :tabp 二、vim与系统剪贴板的交互 (仅限于gvim!!!) &quot;+y 复制到剪贴板 &quot;+p 从剪贴板粘贴 三、vim重复命令 . 重复上次操作，前面可加次数 :[range]g[lobal]/{pattern}/[cmd] 在 [range] 界定的匹配模式 {pattern} 的文本行上执行Ex 命令 [cmd] （缺省是 :p）。 :[range]g[lobal]!/{pattern}/[cmd] 在 [range] 界定的_不_匹配模式 {pattern} 的文本行上执行 Ex 命令 [cmd] （缺省是 :p）。 :[range]v[global]/{pattern}/[cmd] 等同于 :g!。 四、vim中tab与空格的转换 (慎用！！！) :ret[ab][!] [new_tabstop] 将制表符&lt;TAB&gt;转换为空格符，数量由[new_tabstop]指定。若为空或为0，则使用默认的tabstop。 若有!，则将空格序列转化为&lt;TAB&gt;。 五、查看中文帮助: man -L zh_CN.utf8 command 六、查看日志: journalctl [OPTIONS...] [MATCHES...] Options: 123456-f --follow Follow the journal --since=DATE Start showing entries on or newer than the specified date --until=DATE Stop showing entries on or older than the specified date-l --full Do not ellipsize fields-u --unit=UNIT Show data only from the specified unit --disk-usage Show total disk usage of all journal files]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式简介]]></title>
    <url>%2F%2Fposts%2F2014-03-09-intro-for-regular-expression.html</url>
    <content type="text"><![CDATA[元字符 (grep, sed) 1. 句点元字符 . 通配元字符，匹配任意字符，除了换行符。 2. 反斜杠元字符 \\ 将其后面的一个字符解释为普通字符而不是元字符。 3. 星号元字符 \* 其紧挨着的之前的匹配有 0+ 次匹配机会。 4. 位置元字符 ^, $ ^ 匹配字符串的最前面。 $ 匹配字符串的最后面。 5. 字符组元字符 [ ], 连字符元字符 -, 补字号 ^ [] 匹配方括号内的左右字符。 \- 连字符元字符仅在字符组元字符内有意义，表示一段连续字符范围。 ^ 表示排除某些字符。 6. 范围字符串 \\{ \\} \\{n,m\\} 匹配 n~m 次。 \\{n\\} 匹配 n 次。 \\{n,\\} 匹配 n+ 次。 7. 特殊字符类 [[:alpha:]] 匹配任意字母字符，大写或小写 [[:alnum:]] 匹配任意字母数字字符，0-9, a-z, A-Z [[:blank:]] 匹配空格或制表符字符 [[:digit:]] 匹配任意数字字符，0-9 [[:lower:]] 匹配任意小写字母，a-z [[:print:]] 匹配任意可打印字符 [[:punct:]] 匹配任意标点 [[:space:]] 匹配任意空白字符: 空格、制表符、NL、FF、VT、CR [[:upper:]] 匹配任意大写字符，A-Z 扩展元字符 (egrep, awk) 1. 加号元字符 + 其紧挨着的之前的匹配有 1+ 次匹配机会。 2. 问号元字符 ? 其紧挨着的之前的匹配有 0~1 次匹配机会。 3. 竖线元字符 | r1|r2 匹配 r1 或 r2 4. 括号元字符 ( ) (r1) 匹配子字符串r1(常与 * + ? | 等连用)。 5. 范围元字符 { } 与上面的范围元字符类似。 固定元字符 (grep) 1. \\&lt; \\&gt; 严格匹配一个词(后面必须直接跟一个空格或标点符号)。 参考: Linux Command Line and shell Scripting Bible, Richard Blum UNIX awk and sed PROGRAMMER'S INTERACTIVE WORKBOOK, Peter Patsis]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>sed</tag>
        <tag>regular expression</tag>
        <tag>grep</tag>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Piplight 在 Linux 上使用网银]]></title>
    <url>%2F%2Fposts%2F2014-03-02-Pipelight-use-eBank-on-Linux.html</url>
    <content type="text"><![CDATA[[@felixonmars](https://twitter.com/felixonmars) 在博客 Pipelight – 让 Linux 原生 Chromium/Chrome 无缝支持 ActiveX 控件 (看! 网银!) 中对如何通过 pipelight 使用工行网银做了很详细的描述, 不过是以 Arch Linux 作为例子来介绍的. 这里以 Fedora 20 为例, 做一个详细的介绍. 二者 Pipelight 和 ActiveX 控件的配置相同, 在 Pipelight 的安装上略有不同. 另外，Fedora 在安装 wine 时没有安装 winetricks, 需要手动安装. 因此, 相同部分的步骤基本上来自上面的博客. 基本的原理：利用 Chrome 里已有的 npactivex (ActiveX for Chrome) 扩展, 配合 pipelight 提供的 npactivex NPAPI 插件, 将 ActiveX 控件本身用 wine 执行, 并且无缝地嵌入 Chrome 网页中. 1. 安装不在仓库里的微软核心字体: sudo yum install cabextract sudo rpm -i http://sourceforge.net/projects/mscorefonts2/files/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm 2. 然后添加仓库, 并安装 Pipelight (对于 Fedora 18 和 Fedora 19 只需要把 Fedora_20 替换成 Fedora_18 或 Fedora_19 即可): sudo wget http://download.opensuse.org/repositories/home:/DarkPlayer:/Pipelight/Fedora_20/home:DarkPlayer:Pipelight.repo -O /etc/yum.repos.d/pipelight.repo sudo yum install pipelight sudo pipelight-plugin --update 3. 解锁 pipelight 的 npactivex 插件: sudo pipelight-plugin --unlock npactivex 看到 &quot;Plugin npactivex is now unlocked&quot; 即为解锁成功 4. 启用 npactivex 插件: sudo pipelight-plugin --enable npactivex 5. 启动 chrome 浏览器, 打开 chrome://plugins, 应该可以看到以下内容: ActiveX hosting plugin for NPAPI ActiveX hosting plugin for NPAPI r37 Name: ActiveX hosting plugin for NPAPI Description: ActiveX hosting plugin for NPAPI r37 Version: Location: /usr/lib/pipelight/libpipelight-npactivex.so Type: NPAPI Disable MIME types: MIME type Description File extensions application/x-itst-activex ActiveX (*.ocx) .ocx application/activex-manager ActiveXManager 如果看到下列错误: Pipelight Error (npactivex)! Something went wrong, check the terminal output 请从终端打开 chromium/google-chrome, 观察终端出错日志 6. 安装winetricks: wget http://winetricks.googlecode.com/svn/trunk/src/winetricks sudo cp winetricks /path/to/your/bin/ sudo chmod +x /path/to/your/bin/winetricks 7. 安装需要的 ActiveX 控件. 下面以工行控件为例: 7.1. 下载工行网银控件安装包: wget http://www.icbc.com.cn/icbc/html/download/dkq/icbc_netbank_client_controls.exe 7.2. 安装 mfc42 运行库: WINEPREFIX=~/.wine-pipelight winetricks -q mfc42 7.3. 安装: WINEPREFIX=~/.wine-pipelight wine icbc_netbank_client_controls.exe 故障排除: 运行 WINEPREFIX=~/.wine-pipelight wine uninstaller --list 如果输出包含以下内容就说明安装成功了, 否则说明以上某一步出错了 {93156467-FD99-4A30-9CA5-8563F4BB8DB3}|||icbc_netbank_client_controls 8. 安装 np-activex extension: 扩展可以从 Chrome Web Store 直接安装, 地址: https://chrome.google.com/webstore/detail/activex-for-chrome/lgllffgicojgllpmdbemgglaponefajn/related 9. 设置 np-activex extension: 打开 chrome://chrome/extensions, 点击 &quot;ActiveX for Chrome&quot; 旁边的 &quot;选项&quot; (Options), 浏览到 &quot;ICBC工商银行&quot; 所在的条目, 将&quot;已禁用&quot;改为&quot;已启用&quot;. 10. 用 Chrome 打开 https://mybank.icbc.com.cn/icbc/perbank/index.jsp 应该可以正常登陆工行网银了. 上面的博客还给出了其作者对支付宝的测试成功的 npactivex extension 的规则: Mode: WildChar Pattern: https://*.alipay.com/* User Agent: MSIE9 Other helper scripts: dynamic ieevent 不过, 在 npactivex extension 的设置页面中虽然有农业银行的的选项，但是我还是始终没有成功...... 参考: Pipelight – 让 Linux 原生 Chromium/Chrome 无缝支持 ActiveX 控件 (看! 网银!) Pipelight - Installation]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>fedora</tag>
        <tag>pipelight</tag>
        <tag>wine</tag>
        <tag>ActiveX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 随学随记 (1)]]></title>
    <url>%2F%2Fposts%2F2014-03-01-Linux-Notes-1.html</url>
    <content type="text"><![CDATA[一、vim替换 ctrl+v 进入列模式,向下或向上移动光标,把需要注释的行的开头标记起来,然后按大写的I,再插入注释符,比如#,再按Esc,就会全部注释。或者也可以运行下面这些命令： 1234:s/^/# #用&quot;#&quot;注释当前行:2,50s/^/# #在2~50行首添加&quot;#&quot;注释:.,+3s/^/# #用&quot;#&quot;注释当前行和当前行后面的三行:%s/^/# #用&quot;#&quot;注释所有行 顺便说一下vim的替换，这个常用，已经牢记，其实和上面用命令注释多行是一样的，只不过是上面注释的命令里的&quot;^&quot;符号代表开始位置而已，在下面这些命令中，&quot;s&quot;代表替换，part1代表查找的内容，part2代表替换的内容，&quot;%&quot;代表所有行，&quot;g&quot;代表替换整行里所有的内容（如果不加&quot;/g&quot;则只替换每行第一个匹配part1的地方）。 p.n.关于g的用法貌似在本系统相反，虽然各处都这么说。。。 12345678:s/part1/part2 #用part2替换当前行中第1个part1:s/part1/part2/g #用part2替换当前行中所有的part1:%s/part1/part2 #用part2替换所有行中每行第1个part1:%s/part1/part2/g #用part2替换所有行中所有的part1:2,50s/part1/part2 #用part2替换第2行到第50行中每行第1个part1:2,50s/part1/part2/g #用part2替换第2行到第50行中所有的part1:.,+3s/part1/part2 #用part2替换当前行以及当前行后面的三行中每行第1个part1:.,+3s/part1/part2/g #用part2替换当前行以及当前行后面的三行中所有的part1 BTW:在替换时要注意，某些字符是需要转译的，如空格、括号等。 二、sed添加空行 （一）每行前后添加空行 123456sed G tmp #每行后面添加一行空行sed &apos;&#123;x;p;x;&#125;&apos; tmp #每行前面添加一行空行sed &apos;G;G&apos; tmp #每行后面添加两行空行sed &apos;&#123;x;p;x;x;p;x;&#125;&apos; tmp #每行前面添加两行空行sed &apos;G;G;G&apos; tmp #每行后面添加三行空行sed &apos;&#123;x;p;x;x;p;x;x;p;x&#125;&apos; tmp #每行前面添加三行空行 依次类推，添加几行空行，就有几个G或者x;p;x （二）如果行后有空行，则删除，然后每行后面添加空行 sed '/^$/d;G' tmp （三）在匹配行前后添加空行 12345sed &apos;/shui/G&apos; tmp #如果一行里面有如果一行里面有shui这个单词，那么在他后面会添加一个空行sed &apos;/shui/&#123;x;p;x;G&#125;&apos; tmp #如果一行里面有shui这个单词，那么在他前后各添加一个空行sed &apos;/shui/&#123;x;p;x;&#125;&apos; tmp #如果一行里面有shui这个单词，那么在他前面添加一个空行sed &apos;1&#123;x;p;x;&#125;&apos; tmp #在第一行前面添加空行，想在第几行，命令中的1就改成几sed &apos;1G&apos; tmp #在第一行后面添加空行，想在第几行，命令中的1就改成几 （四）每几行后面添加一个空行 1234sed &apos;N;/^$/d;G&apos; tmp #每两行后面增加一个空行sed &apos;N;/^$/d;&#123;x;p;x;&#125;&apos; tmp #每两行前面添加一个空行sed &apos;N;N;/^$/d;G&apos; tmp #每三行后面增加一个空行sed &apos;N;N;/^$/d;&#123;x;p;x;&#125;&apos; tmp #每三行前面增加一个空行 （五）以x为开头或以x为结尾的行前后添加空行 1234sed &apos;/^xi/G;&apos; tmp #以xi为开头的行后面添加空行sed &apos;/^xi/&#123;x;p;x;&#125;&apos; tmp #以xi为结尾的行前面添加空行sed &apos;/xi$/G;&apos; tmp #以xi为结尾的行后面添加空行sed &apos;/xi$/&#123;x;p;x;&#125;&apos; tmp #以xi为结尾的行后面添加空行 三、sed删除行首空格 如果确认只是空格： sed 's/^ *//' infile 如果判断不清行首是空格还是制表符的话， 还可以用这个： sed 's/^[[:space:]]*//' infile]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
        <tag>sed</tag>
        <tag>vim</tag>
      </tags>
  </entry>
</search>
